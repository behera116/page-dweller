{"version":3,"file":"compromise-ngrams.js","sources":["../src/getGrams.js","../src/startGrams.js","../src/endGrams.js","../src/tokenize.js","../src/sort.js","../src/index.js"],"sourcesContent":["const defaults = {\n  max: 4,\n  min: 1,\n}\n\nconst oneSize = function(list, size) {\n  let grams = {}\n  // count each instance\n  list.forEach(terms => {\n    for (let i = 0; i < terms.length; i += 1) {\n      let slice = terms.slice(i, i + size)\n      if (slice.length === size) {\n        let str = slice.join(' ')\n        if (grams.hasOwnProperty(str)) {\n          grams[str].count += 1\n        } else {\n          grams[str] = {\n            size: size,\n            count: 1,\n          }\n        }\n      }\n    }\n  })\n  // turn them into an array\n  let arr = Object.keys(grams).map(k => {\n    grams[k].normal = k\n    return grams[k]\n  })\n  return arr\n}\n\nconst allGrams = function(list, options) {\n  // support {size:2} syntax\n  if (options.size) {\n    options.min = options.size\n    options.max = options.size\n  }\n  let max = options.max || defaults.max\n  let min = options.min || defaults.min\n  let arr = []\n  for (let size = min; size <= max; size += 1) {\n    arr = arr.concat(oneSize(list, size))\n  }\n  return arr\n}\nmodule.exports = allGrams\n","const defaults = {\n  max: 4,\n  min: 1,\n}\n\nconst oneSize = function(list, size) {\n  let grams = {}\n  // count each instance\n  list.forEach(terms => {\n    for (let i = 0; i <= terms.length; i += 1) {\n      let slice = terms.slice(0, i)\n      if (slice.length === size) {\n        let str = slice.join(' ')\n        if (grams.hasOwnProperty(str)) {\n          grams[str].count += 1\n        } else {\n          grams[str] = {\n            size: size,\n            count: 1,\n          }\n        }\n      }\n    }\n  })\n  // turn them into an array\n  let arr = Object.keys(grams).map(k => {\n    grams[k].normal = k\n    return grams[k]\n  })\n  return arr\n}\n\nconst startGrams = function(list, options) {\n  // support {size:2} syntax\n  if (options.size) {\n    options.min = options.size\n    options.max = options.size\n  }\n  let max = options.max || defaults.max\n  let min = options.min || defaults.min\n  let arr = []\n  for (let size = min; size <= max; size++) {\n    arr = arr.concat(oneSize(list, size))\n  }\n  return arr\n}\nmodule.exports = startGrams\n","const defaults = {\n  max: 4,\n  min: 1,\n}\n\nconst oneSize = function(list, size) {\n  let grams = {}\n  // count each instance\n  list.forEach(terms => {\n    let len = terms.length\n    for (let i = 0; i <= terms.length; i += 1) {\n      let slice = terms.slice(len - i, len)\n      if (slice.length === size) {\n        let str = slice.join(' ')\n        if (grams.hasOwnProperty(str)) {\n          grams[str].count += 1\n        } else {\n          grams[str] = {\n            size: size,\n            count: 1,\n          }\n        }\n      }\n    }\n  })\n  // turn them into an array\n  let arr = Object.keys(grams).map(k => {\n    grams[k].normal = k\n    return grams[k]\n  })\n  return arr\n}\n\nconst endGrams = function(list, options) {\n  // support {size:2} syntax\n  if (options.size) {\n    options.min = options.size\n    options.max = options.size\n  }\n  let max = options.max || defaults.max\n  let min = options.min || defaults.min\n  let arr = []\n  for (let size = min; size <= max; size++) {\n    arr = arr.concat(oneSize(list, size))\n  }\n  return arr\n}\nmodule.exports = endGrams\n","// tokenize by term\nconst tokenize = function(doc) {\n  let list = doc.json({ terms: { clean: true }, text: false }).map(o => {\n    return o.terms.map(t => t.clean)\n  })\n  return list\n}\nmodule.exports = tokenize\n","const sort = function(arr) {\n  arr = arr.sort((a, b) => {\n    //first sort them by count\n    if (a.count > b.count) {\n      return -1\n    }\n    if (a.count < b.count) {\n      return 1\n    }\n    // in a tie, sort them by size\n    if (a.size > b.size) {\n      return -1\n    }\n    if (a.size < b.size) {\n      return 1\n    }\n    return 0\n  })\n  return arr\n}\nmodule.exports = sort\n","const getGrams = require('./getGrams')\nconst startGrams = require('./startGrams')\nconst endGrams = require('./endGrams')\nconst tokenize = require('./tokenize')\nconst sort = require('./sort')\n\nconst addMethod = function(Doc) {\n  /** list all repeating sub-phrases, by word-count */\n  Doc.prototype.ngrams = function(obj) {\n    let list = tokenize(this)\n    let arr = getGrams(list, obj || {})\n    arr = sort(arr)\n    return arr\n  }\n  Doc.prototype.nGrams = Doc.prototype.ngrams\n\n  /** n-grams with one word */\n  Doc.prototype.unigrams = function(n) {\n    let arr = getGrams(tokenize(this), { max: 1, min: 1 })\n    arr = sort(arr)\n    if (typeof n === 'number') {\n      arr = arr[n]\n    }\n    return arr\n  }\n  Doc.prototype.uniGrams = Doc.prototype.unigrams\n\n  /** n-grams with two words */\n  Doc.prototype.bigrams = function(n) {\n    let arr = getGrams(tokenize(this), { max: 2, min: 2 })\n    arr = sort(arr)\n    if (typeof n === 'number') {\n      arr = arr[n]\n    }\n    return arr\n  }\n  Doc.prototype.biGrams = Doc.prototype.bigrams\n\n  /** n-grams with three words */\n  Doc.prototype.trigrams = function(n) {\n    let arr = getGrams(tokenize(this), { max: 3, min: 3 })\n    arr = sort(arr)\n    if (typeof n === 'number') {\n      arr = arr[n]\n    }\n    return arr\n  }\n  Doc.prototype.triGrams = Doc.prototype.trigrams\n\n  /** list all repeating sub-phrases, using the first word */\n  Doc.prototype.startgrams = function(obj) {\n    let list = tokenize(this)\n    let arr = startGrams(list, obj || {})\n    arr = sort(arr)\n    return arr\n  }\n  Doc.prototype.startGrams = Doc.prototype.startgrams\n\n  /** list all repeating sub-phrases, connected to the last word of each phrase */\n  Doc.prototype.endgrams = function(obj) {\n    let list = tokenize(this)\n    let arr = endGrams(list, obj || {})\n    arr = sort(arr)\n    return arr\n  }\n  Doc.prototype.endGrams = Doc.prototype.endgrams\n\n  /** list all repeating sub-phrases, connected to the last word of each phrase */\n  Doc.prototype.edgegrams = function(obj) {\n    let list = tokenize(this)\n    let start = startGrams(list, obj || {})\n    let end = endGrams(list, obj || {})\n    // combine them together\n    let all = start.concat(end)\n    let combine = all.reduce((h, a) => {\n      if (h[a.normal]) {\n        h[a.normal].count += a.count\n      } else {\n        h[a.normal] = a\n      }\n      return h\n    }, {})\n    let arr = Object.keys(combine).map(k => combine[k])\n    arr = sort(arr)\n    return arr\n  }\n  Doc.prototype.edgeGrams = Doc.prototype.edgegrams\n}\nmodule.exports = addMethod\n"],"names":["defaults","max","min","oneSize","list","size","grams","forEach","terms","i","length","slice","str","join","hasOwnProperty","count","arr","Object","keys","map","k","normal","allGrams","options","concat","startGrams","len","endGrams","tokenize","doc","json","clean","text","o","t","sort","a","b","addMethod","Doc","prototype","ngrams","obj","getGrams","nGrams","unigrams","n","uniGrams","bigrams","biGrams","trigrams","triGrams","startgrams","endgrams","edgegrams","start","end","all","combine","reduce","h","edgeGrams"],"mappings":"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"}